name: Prepare new module release
concurrency: prepare_release
env:
  sot: oStack
  module_path: "backend-tfe"
  module_source: "Olivr/backend/tfe"
  run_number: ${{ github.event.inputs.run_number || 1 }}
  max_runs: 3

on:
  schedule:
    # At 01:00 on Tuesday (08:00 Bangkok time)
    - cron: "0 1 * * 2"
  workflow_dispatch:
    inputs:
      run_number:
        description: Specify run number (to limit number of retries)
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    name: Prepare Release
    outputs:
      module-version: ${{ steps.version.outputs.module-version }}
      next-version: ${{ steps.version.outputs.next-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate changelog and next version
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: yarn semantic-release -e ./.config/release.config.js --dry-run

      - name: Format changelog
        run: yarn prettier --config .prettierrc.json --write --parser markdown docs/CHANGELOG.md

      - name: Output versions
        id: version
        continue-on-error: true
        run: next_version=$(cat VERSION); echo "::set-output name=next-version::$next_version" && echo "::set-output name=module-version::>= $next_version, < $(expr ${next_version%%.*} + 1).0.0"

      - name: Save the changelog
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: docs/CHANGELOG.md

  pull-request:
    needs: release
    if: needs.release.outputs.next-version
    runs-on: ubuntu-latest
    name: Create pull request on source repo
    steps:
      - run: echo ${{needs.release.outputs.next-version}}

      - name: Checkout ${{ env.sot }} monorepo
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/${{ env.sot }}
          token: ${{ secrets.copybara_token }}

      - name: Remove the current changelog
        run: rm -rf modules/${{ env.module_path }}/docs/CHANGELOG.md

      - name: Download the new changelog
        uses: actions/download-artifact@v2
        with:
          name: changelog
          path: modules/${{ env.module_path }}/docs/

      - name: Create pull request (Run ${{ env.run_number }}/${{ env.max_runs }})
        id: pullrequest
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.copybara_token }}
          title: Prepare ${{ env.module_path }} v${{needs.release.outputs.next-version}}
          commit-message: "Chore: Prepare ${{ env.module_source }} v${{needs.release.outputs.next-version}}"
          body: Coming from https://github.com/${{ github.repository }}
          branch: ${{ env.module_path }}/prepare
          delete-branch: true
          labels: automerge

      - name: Enable pull request automerge
        id: automerge
        if: steps.pullrequest.outputs.pull-request-number
        continue-on-error: true
        uses: peter-evans/enable-pull-request-automerge@v1
        with:
          repository: ${{ github.repository_owner }}/${{ env.sot }}
          token: ${{ secrets.copybara_token }}
          pull-request-number: ${{ steps.pullrequest.outputs.pull-request-number }}
          merge-method: squash

      - name: Merge pull request (if automerge failed)
        id: manualmerge
        if: steps.pullrequest.outputs.pull-request-number && steps.automerge.outcome != 'success'
        continue-on-error: true
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.copybara_token }}
          script: |
            await github.pulls.merge({
              merge_method: "squash",
              owner: context.repo.owner,
              pull_number: ${{ steps.pullrequest.outputs.pull-request-number }},
              repo: "${{ env.sot }}",
            })

      - name: Restart the workflow if merging failed
        if: steps.pullrequest.outputs.pull-request-number && steps.automerge.outcome != 'success' && steps.manualmerge.outcome != 'success' && env.run_number < env.max_runs
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.copybara_token }}
          script: |
            const run = await github.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            })

            await github.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: run.data.workflow_id,
              ref: context.ref,
              inputs: { run_number: (${{ env.run_number }} + 1).toString() }
            })

      - name: Merging failed ${{ env.max_runs }} times
        if: steps.pullrequest.outputs.pull-request-number && steps.automerge.outcome != 'success' && steps.manualmerge.outcome != 'success' && env.run_number >= env.max_runs
        run: exit 1
